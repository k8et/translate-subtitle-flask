import io
from pathlib import Path
from tempfile import NamedTemporaryFile
from flask import Flask, request, jsonify
import pysrt
from bs4 import BeautifulSoup
from deep_translator import GoogleTranslator

app = Flask(__name__)
translator = GoogleTranslator(source="auto", target="ru")  # üí° —è–∑—ã–∫ –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å

# ---------- utils -----------------------------------------------------------

def strip_tags(text: str) -> str:
    """–£–¥–∞–ª—è–µ–º HTML/BB-—Ç–µ–≥–∏."""
    return BeautifulSoup(text, "html.parser").get_text()

def parse_srt(file_path: Path) -> list[dict]:
    """–ß–∏—Ç–∞–µ–º .srt –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º [{index, text}] –±–µ–∑ —Ç–µ–≥–æ–≤ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫."""
    subs = pysrt.open(file_path, encoding="utf-8")
    items = []
    for sub in subs:
        clean = strip_tags(sub.text.strip())
        if clean:
            items.append(
                {
                    "index": sub.index,
                    "original": " ".join(clean.splitlines()),
                }
            )
    return items
BATCH_SIZE      = 25
MAX_CHARS_BATCH = 4500
def translate_items(items: list[dict], target_lang: str = "ru") -> None:
    """
    –ü–µ—Ä–µ–≤–æ–¥–∏–º items –±–∞—Ç—á–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–∞–∂–¥—É—é —Ä–µ–ø–ª–∏–∫—É.
    –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ 'translation' –∫ –∫–∞–∂–¥–æ–º—É item.
    """
    trans = GoogleTranslator(source="auto", target=target_lang)
    sep = "\n====\n"

    i = 0
    while i < len(items):
        batch_items = []
        char_count = 0

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—á–∫—É –ø–æ BATCH_SIZE –∏ MAX_CHARS_BATCH
        while (len(batch_items) < BATCH_SIZE and i < len(items) and
               char_count + len(items[i]["original"]) + 1 < MAX_CHARS_BATCH):
            batch_items.append(items[i]["original"])
            char_count += len(items[i]["original"]) + 1
            i += 1

        # –ü–µ—Ä–µ–≤–æ–¥ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        try:
            translated_text = trans.translate(sep.join(batch_items))
            translations = translated_text.split(sep)
        except Exception as e:
            # –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏ –ø—Ä–æ—Å—Ç–∞–≤–∏–º –∑–∞–≥–ª—É—à–∫–∏
            translations = ["[translation error]" for _ in batch_items]
            print(f"[!] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –±–∞—Ç—á–∞: {e}")

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –≤ –∏—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤
        for j, text in enumerate(translations):
            idx = i - len(batch_items) + j
            items[idx]["translation"] = text
# ---------- API -------------------------------------------------------------

@app.route("/translate", methods=["POST"])
def translate_endpoint():
    """
    curl -X POST -F "file=@my.srt" -F "lang=uk" http://localhost:5000/translate
    """
    if "file" not in request.files:
        return jsonify({"error": "no file"}), 400

    lang = request.form.get("lang", "ru")
    uploaded = request.files["file"]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª (pysrt —Ç—Ä–µ–±—É–µ—Ç –ø—É—Ç—å)
    with NamedTemporaryFile(delete=False, suffix=".srt") as tmp:
        tmp.write(uploaded.read())
        tmp_path = Path(tmp.name)

    items = parse_srt(tmp_path)
    translate_items(items, lang)
    tmp_path.unlink(missing_ok=True)  # –æ—á–∏—Å—Ç–∫–∞

    return jsonify({"items": items})

# ---------- entrypoint ------------------------------------------------------

if __name__ == "__main__":
    app.run(debug=True, host="0.0.0.0", port=5000)
