import sys
import re
import asyncio
from pathlib import Path
import pysrt
from bs4 import BeautifulSoup
from tqdm.asyncio import tqdm as async_tqdm
import genanki
import deepl

# –í–∞—à API-–∫–ª—é—á DeepL
DEEPL_AUTH_KEY = "fbb22451-a491-4051-838e-8f14ac778fc3:fx"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ DeepL
translator = deepl.Translator(DEEPL_AUTH_KEY)


def strip_tags(text):
    return BeautifulSoup(text, "html.parser").get_text()


def ends_sentence(text):
    text = text.strip()
    if re.search(r'\.\.\.$', text):
        return False
    return bool(re.search(r'[.!?]["\']?\s*$', text))


def starts_with_timecode(text):
    return bool(re.match(r'^(\d{1,2}:\d{2}\s*(a\.m\.|p\.m\.))', text.strip(), re.IGNORECASE))


def starts_with_dash(text):
    return text.strip().startswith('-')


def merge_subtitles(subs):
    blocks = []
    current_text = ""

    for sub in subs:
        clean = strip_tags(sub.text.strip().replace('\n', ' ')).strip()
        if not clean:
            continue

        if not current_text:
            current_text = clean
            continue

        if (not ends_sentence(current_text)) and (not starts_with_timecode(clean)) and (not starts_with_dash(clean)):
            current_text += " " + clean
        else:
            blocks.append(current_text.strip())
            current_text = clean

    if current_text:
        blocks.append(current_text.strip())

    return blocks


def translate_block_deepl(text, target_lang='RU'):
    try:
        result = translator.translate_text(text, target_lang=target_lang)
        return result.text
    except Exception as e:
        print(f"[!] –û—à–∏–±–∫–∞ DeepL: {e}")
        return "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞"


async def translate_block_deepl_async(text, target_lang='RU'):
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    return await asyncio.to_thread(translate_block_deepl, text, target_lang)


async def translate_blocks(blocks, target_lang='RU'):
    results = []
    for block in async_tqdm(blocks, desc="üîÅ –ü–µ—Ä–µ–≤–æ–¥ DeepL"):
        translated = await translate_block_deepl_async(block, target_lang)
        results.append(translated)
    return results


def export_to_apkg(original_blocks, translated_blocks, out_path: Path, deck_name="Subtitle Translation"):
    print("üì¶ –≠–∫—Å–ø–æ—Ä—Ç –≤ .apkg")

    model = genanki.Model(
        1607392319,
        'Subtitle Translation Model',
        fields=[
            {'name': 'Original'},
            {'name': 'Translation'},
        ],
        templates=[
            {
                'name': 'Card 1',
                'qfmt': '{{Original}}',
                'afmt': '{{FrontSide}}<hr id="answer">{{Translation}}',
            },
        ])

    deck = genanki.Deck(
        2059400110,
        deck_name
    )

    for orig, trans in zip(original_blocks, translated_blocks):
        note = genanki.Note(
            model=model,
            fields=[orig, trans]
        )
        deck.add_note(note)

    apkg_path = out_path.with_suffix(".apkg")
    genanki.Package(deck).write_to_file(str(apkg_path))
    print(f"‚úÖ –§–∞–π–ª .apkg —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {apkg_path}")


def export_to_html(original_blocks, translated_blocks, out_path: Path):
    rows = []
    for orig, trans in zip(original_blocks, translated_blocks):
        orig_html = orig.replace('"', '&quot;')
        trans_html = trans.replace('"', '&quot;')
        rows.append(f"<tr><td>{orig_html}</td><td>{trans_html}</td></tr>")

    html = f"""
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <title>–ü–µ—Ä–µ–≤–æ–¥ —Å—É–±—Ç–∏—Ç—Ä–æ–≤</title>
        <style>
            body {{
                font-family: sans-serif;
                padding: 20px;
                background-color: #fdfdfd;
            }}
            table {{
                width: 100%;
                border-collapse: collapse;
                table-layout: fixed;
            }}
            th, td {{
                border: 1px solid #ccc;
                padding: 10px;
                vertical-align: top;
                word-wrap: break-word;
            }}
            th {{
                background-color: #f0f0f0;
            }}
        </style>
    </head>
    <body>
        <h1>–ü–µ—Ä–µ–≤–æ–¥ —Å—É–±—Ç–∏—Ç—Ä–æ–≤</h1>
        <table>
            <tr><th>–û—Ä–∏–≥–∏–Ω–∞–ª</th><th>–ü–µ—Ä–µ–≤–æ–¥</th></tr>
            {''.join(rows)}
        </table>
    </body>
    </html>
    """

    html_path = out_path.with_suffix(".html")
    html_path.write_text(html, encoding='utf-8')
    print(f"‚úÖ HTML —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {html_path}")


async def process_srt_to_html_blocks(src_path: Path, target_lang: str = 'RU'):
    print(f"üîç –ß–∏—Ç–∞—é —Ñ–∞–π–ª: {src_path}")
    subs = pysrt.open(src_path, encoding='utf-8')

    print("üß† –û–±—ä–µ–¥–∏–Ω—è—é —Å—É–±—Ç–∏—Ç—Ä—ã –≤ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –±–ª–æ–∫–∏...")
    original_blocks = merge_subtitles(subs)
    print(f"üìÑ –ù–∞–π–¥–µ–Ω–æ –±–ª–æ–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞: {len(original_blocks)}")

    translated_blocks = await translate_blocks(original_blocks, target_lang)

    export_to_html(original_blocks, translated_blocks, src_path)
    export_to_apkg(original_blocks, translated_blocks, src_path)


if __name__ == '__main__':
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python3 translate_srt_deepl.py <—Ñ–∞–π–ª.srt> [—è–∑—ã–∫]")
        sys.exit(1)

    srt_file = Path(sys.argv[1])
    lang = sys.argv[2].upper() if len(sys.argv) > 2 else 'RU'

    asyncio.run(process_srt_to_html_blocks(srt_file, lang))
